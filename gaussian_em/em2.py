import numpy as np
import pandas as pd
import torch
from tqdm import tqdm
from sklearn.mixture import GaussianMixture


def create_data(a1, u1, s1, a2, u2, s2, n):
    normal1 = torch.normal(u1, s1, size=(int(n * a1),))
    normal2 = torch.normal(u2, s2, size=(int(n * a2),))

    y = torch.cat([normal1, normal2])
    # shuffle
    idx = torch.randperm(y.nelement())
    y = y.view(-1)[idx].view(y.size()).reshape(-1, 1)

    print("y.shape: ", y.shape)

    return y.numpy()


def main():
    n = 1000
    a1_true = 0.3
    u1_true = -2
    s1_true = 0.5
    a2_true = 0.7
    u2_true = 0.5
    s2_true = 1

    y = create_data(a1_true, u1_true, s1_true, a2_true, u2_true, s2_true, n)
    # w = np.array([0.5, 0, 1, 0.5, 1, 1]).reshape(2, -1)

    model = GaussianMixture(n_components=2)
    model.fit(y)
    labels = model.predict(y)
    print(labels)

    # y.shape:  torch.Size([1000, 1])
    # [1 0 1 1 1 0 0 0 0 1 1 0 0 1 0 1 1 0 0 0 0 1 0 0 0 1 0 1 0 0 1 1 0 1 1 0 0
    #  1 0 0 1 0 0 0 1 1 0 0 0 0 1 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0
    #  0 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1
    #  0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0
    #  0 0 1 1 1 1 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 0 0 0 1 1 0 0 1 0 1 0 1 0 1 0 0
    #  0 0 0 0 1 1 0 0 0 1 1 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 0 0 1 1 0 1 0 1 0 0 0
    #  1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1 1 1 0 0 1 1 1
    #  0 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0
    #  0 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0
    #  0 0 1 1 1 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0
    #  0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 0 1 0 0
    #  1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 1 1 0 1 0
    #  0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0
    #  1 0 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 0 0 1 1 0 0 1 1 1 0 0 1 1 0 0 0
    #  1 0 0 1 1 1 0 1 1 0 1 0 1 0 0 1 1 0 0 0 1 0 1 1 1 1 0 1 1 0 0 0 0 0 1 0 0
    #  0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 1 1 0 1 1 0 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0 1
    #  0 0 0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0
    #  0 0 0 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0
    #  0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 0 0 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1
    #  0 0 0 0 0 0 1 1 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 1 1 0 1
    #  0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 1
    #  0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1
    #  0 0 0 0 1 0 1 1 0 1 0 0 1 1 0 1 0 0 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0
    #  0 1 0 0 1 0 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1
    #  0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 0 1 0 0
    #  1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0
    #  0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 0 0
    #  0]


if __name__ == '__main__':
    main()
